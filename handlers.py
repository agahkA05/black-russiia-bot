from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
import os
import json
from datetime import datetime

from config import (
    ADMIN_USERNAME, UPLOAD_PATH, MAX_PHOTOS_PER_AD, CATEGORIES, 
    MIN_PRICE, MAX_PRICE, MIN_PRICE_RUB, MAX_PRICE_RUB, 
    CURRENCIES, CONDITIONS, CONDITION_NAMES, SUBCATEGORIES, SERVERS, COMPLAINT_REASONS
)
from database import Database
from keyboards import *
from keyboards_extended import *
from states import *

router = Router()
db = Database("black_russia_market.db")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    db.add_user(user.id, user.username or "", user.first_name or "", user.last_name or "")
    
    welcome_text = f"""
üéÆ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Black Russia Market!**

üî´ **–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å:**
‚Ä¢ üî´ –û—Ä—É–∂–∏–µ –∏ –±—Ä–æ–Ω—é
‚Ä¢ üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å  
‚Ä¢ üíä –ù–∞—Ä–∫–æ—Ç–∏–∫–∏ –∏ —Ö–∏–º–∏–∫–∞—Ç—ã
‚Ä¢ üí∞ –î–µ–Ω—å–≥–∏ –∏ —Ä–µ—Å—É—Ä—Å—ã
‚Ä¢ üë§ –ê–∫–∫–∞—É–Ω—Ç—ã –∏ —É—Å–ª—É–≥–∏
‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!

üí∞ **–¶–µ–Ω—ã:**
‚Ä¢ –õ—é–±—ã–µ —Ü–µ–Ω—ã –≤ USD, RUB, EUR
‚Ä¢ –ú–∏–Ω–∏–º—É–º: 0.01

üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**
    """
    
    await message.answer(welcome_text, reply_markup=get_main_menu())

@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin (—Ç–æ–ª—å–∫–æ –¥–ª—è @Aga_05)"""
    if message.from_user.username != ADMIN_USERNAME:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!")
        return
    
    await message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_panel())

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = f"""
‚ùì –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üîç **–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤:**
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã"
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è

üìù **–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:**
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üìù –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º
‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
‚Ä¢ –¶–µ–Ω–∞: –ª—é–±—ã–µ —Ü–µ–Ω—ã –≤ USD, RUB, EUR (–º–∏–Ω–∏–º—É–º 0.01)

‚≠ê **–ò–∑–±—Ä–∞–Ω–Ω–æ–µ:**
‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
‚Ä¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏

üí¨ **–ß–∞—Ç —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º:**
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É"
‚Ä¢ –û–±—Å—É–∂–¥–∞–π—Ç–µ –¥–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ

‚ö†Ô∏è **–ñ–∞–ª–æ–±—ã:**
‚Ä¢ –°–æ–æ–±—â–∞–π—Ç–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö
‚Ä¢ –ü—Ä–∏–∫—Ä–µ–ø–ª—è–π—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
‚Ä¢ –ü–æ–º–æ–≥–∞–π—Ç–µ —É–ª—É—á—à–∞—Ç—å –±–æ—Ç–∞
    """
    
    await message.answer(help_text, reply_markup=get_main_menu())

@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    await state.clear()
    await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã")
async def find_goods(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    await message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=get_categories_keyboard())

@router.message(F.text == "üìù –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def create_advertisement(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    await state.set_state(AdvertisementStates.waiting_for_title)
    await message.answer("üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await message.answer("üîô –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel")

@router.message(AdvertisementStates.waiting_for_title)
async def process_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    if len(message.text) < 3:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(title=message.text)
    await state.set_state(AdvertisementStates.waiting_for_description)
    await message.answer("üìÑ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@router.message(AdvertisementStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    if len(message.text) < 10:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(description=message.text)
    await state.set_state(AdvertisementStates.waiting_for_category)
    await message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_categories_keyboard())

@router.message(F.text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def show_favorites(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    await message.answer("‚≠ê –ú–µ–Ω—é –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", reply_markup=get_favorites_menu())

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = message.from_user.id
    user = db.get_user(user_id)
    stats = db.get_user_stats(user_id)
    
    if user:
        profile_text = f"""
üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**

üÜî ID: {user_id}
üë§ –ò–º—è: {user.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìõ Username: @{user.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.get('registration_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
‚≠ê –†–µ–π—Ç–∏–Ω–≥: {user.get('rating', 5.0)}/5.0

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üìù –û–±—ä—è–≤–ª–µ–Ω–∏–π: {stats.get('ads_count', 0)}
‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º: {stats.get('favorites_count', 0)}

üí∞ **–õ–∏–º–∏—Ç—ã:**
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Ñ–æ—Ç–æ: {MAX_PHOTOS_PER_AD}
‚Ä¢ –¶–µ–Ω–∞: –ª—é–±—ã–µ —Ü–µ–Ω—ã –≤ USD, RUB, EUR (–º–∏–Ω–∏–º—É–º 0.01)
        """
    else:
        profile_text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"
    
    await message.answer(profile_text, reply_markup=get_main_menu())

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    ads = db.get_advertisements()
    total_ads = len(ads)
    
    stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üìù **–û–±—ä—è–≤–ª–µ–Ω–∏—è:**
‚Ä¢ –í—Å–µ–≥–æ: {total_ads}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {total_ads}

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_ads + 100}

üî´ **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**
‚Ä¢ –û—Ä—É–∂–∏–µ: {len([ad for ad in ads if ad.get('category') == 'weapons'])}
‚Ä¢ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {len([ad for ad in ads if ad.get('category') == 'vehicles'])}
‚Ä¢ –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å: {len([ad for ad in ads if ad.get('category') == 'houses'])}

üí∞ **–¶–µ–Ω–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã:**
‚Ä¢ –õ—é–±—ã–µ —Ü–µ–Ω—ã –≤ USD, RUB, EUR
‚Ä¢ –ú–∏–Ω–∏–º—É–º: 0.01
        """
    
    await message.answer(stats_text, reply_markup=get_main_menu())

@router.message(F.text == "üìã –ü—Ä–∞–≤–∏–ª–∞")
async def show_rules(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∞–≤–∏–ª"""
    await message.answer("üìã –ü—Ä–∞–≤–∏–ª–∞ Black Russia Market", reply_markup=get_rules_keyboard())

@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def show_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    await cmd_help(message)

@router.message(F.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def show_admin_panel(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if message.from_user.username != ADMIN_USERNAME:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!")
        return
    
    await message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_panel())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await callback.message.delete()
    except Exception:
        pass
    await callback.message.answer("üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**", reply_markup=get_main_menu())
    await callback.answer()

@router.callback_query(F.data == "back_to_categories")
async def back_to_categories(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    try:
        await callback.message.delete()
    except Exception:
        pass
    await callback.message.answer("üìÇ **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:**", reply_markup=get_categories_keyboard())
    await callback.answer()

@router.callback_query(F.data.startswith("category_"))
async def select_category(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    category = callback.data.split("_")[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    current_state = await state.get_state()
    if current_state == AdvertisementStates.waiting_for_category.state:
        await state.update_data(category=category)
        await state.set_state(AdvertisementStates.waiting_for_subcategory)
        try:
            await callback.message.edit_text(
                f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {CATEGORIES[category]}\n\n**–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:**",
                reply_markup=get_subcategories_keyboard(category)
            )
        except Exception:
            await callback.message.answer(
                f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {CATEGORIES[category]}\n\n**–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:**",
                reply_markup=get_subcategories_keyboard(category)
            )
    else:
        # –û–±—ã—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if category in CATEGORIES:
            try:
                await callback.message.edit_text(
                    f"üìÇ **{CATEGORIES[category]}**\n\n**–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:**",
                    reply_markup=get_subcategories_keyboard(category)
                )
            except Exception:
                await callback.message.answer(
                    f"üìÇ **{CATEGORIES[category]}**\n\n**–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:**",
                    reply_markup=get_subcategories_keyboard(category)
                )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    
    await callback.answer()

@router.callback_query(F.data.startswith("subcategory_"))
async def select_subcategory(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    parts = callback.data.split("_")
    category = parts[1]
    subcategory = "_".join(parts[2:])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    current_state = await state.get_state()
    if current_state == AdvertisementStates.waiting_for_subcategory.state:
        await state.update_data(subcategory=subcategory)
        await state.set_state(AdvertisementStates.waiting_for_currency)
        try:
            await callback.message.edit_text(
                f"üè∑Ô∏è **–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:** {subcategory}\n\nüí± **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:**",
                reply_markup=get_currency_keyboard()
            )
        except Exception:
            await callback.message.answer(
                f"üè∑Ô∏è **–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:** {subcategory}\n\nüí± **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:**",
                reply_markup=get_currency_keyboard()
            )
    else:
        # –û–±—ã—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        ads = db.get_advertisements(category)
        filtered_ads = [ad for ad in ads if ad.get('subcategory') == subcategory]
        
        if filtered_ads:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            ad = filtered_ads[0]
            await show_advertisement(callback.message, ad, 0, len(filtered_ads))
        else:
            try:
                await callback.message.edit_text(
                    f"üìÇ **{CATEGORIES.get(category, '–ö–∞—Ç–µ–≥–æ—Ä–∏—è')} - {subcategory}**\n\n"
                    "üòî –ü–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n\n"
                    "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:",
                    reply_markup=get_categories_keyboard()
                )
            except Exception:
                await callback.message.answer(
                    f"üìÇ **{CATEGORIES.get(category, '–ö–∞—Ç–µ–≥–æ—Ä–∏—è')} - {subcategory}**\n\n"
                    "üòî –ü–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n\n"
                    "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:",
                    reply_markup=get_categories_keyboard()
                )
    
    await callback.answer()

@router.callback_query(F.data.startswith("currency_"))
async def select_currency(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã"""
    currency = callback.data.split("_")[1]
    
    if currency not in CURRENCIES:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞")
        return
    
    await state.update_data(currency=currency)
    await state.set_state(AdvertisementStates.waiting_for_price)
    
    try:
        await callback.message.edit_text(
            f"üí± **–í–∞–ª—é—Ç–∞:** {currency}\n\nüí∞ **–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:**"
        )
    except Exception:
        await callback.message.answer(
            f"üí± **–í–∞–ª—é—Ç–∞:** {currency}\n\nüí∞ **–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:**"
        )
    
    await callback.answer()

@router.message(AdvertisementStates.waiting_for_price)
async def process_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    try:
        price = float(message.text)
        
        if price <= 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(price=price)
        await state.set_state(AdvertisementStates.waiting_for_condition)
        await message.answer("üÜï –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_condition_keyboard())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.50). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

@router.callback_query(F.data.startswith("condition_"))
async def select_condition(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    condition = callback.data.split("_")[1]
    
    if condition not in CONDITIONS:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        return
    
    await state.update_data(condition=condition)
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–µ—Ä–≤–µ—Ä—É
    await state.update_data(location="")
    await state.set_state(AdvertisementStates.waiting_for_server)
    
    try:
        await callback.message.edit_text("üñ•Ô∏è **–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞** (–Ω–∞–ø—Ä–∏–º–µ—Ä: Server 1):")
    except Exception:
        await callback.message.answer("üñ•Ô∏è **–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞** (–Ω–∞–ø—Ä–∏–º–µ—Ä: Server 1):")
    
    await callback.answer()

# –£–¥–∞–ª–µ–Ω —à–∞–≥ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@router.message(AdvertisementStates.waiting_for_server)
async def process_server(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    await state.update_data(server=message.text)
    await state.set_state(AdvertisementStates.waiting_for_photos)
    await message.answer(f"üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–º–∞–∫—Å–∏–º—É–º {MAX_PHOTOS_PER_AD} —Ñ–æ—Ç–æ):\n\nüîô –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /finish")

@router.message(AdvertisementStates.waiting_for_photos, F.photo)
async def process_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞"""
    data = await state.get_data()
    photos = data.get('photos', [])
    
    if len(photos) >= MAX_PHOTOS_PER_AD:
        await message.answer(f"‚ùå –ú–∞–∫—Å–∏–º—É–º {MAX_PHOTOS_PER_AD} —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏—Ç–µ /finish –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file_id = photo.file_id
    photos.append(file_id)
    
    await state.update_data(photos=photos)
    await message.answer(f"üì∏ –§–æ—Ç–æ {len(photos)}/{MAX_PHOTOS_PER_AD} –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /finish –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")

@router.message(Command("finish"))
async def finish_advertisement(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    required_fields = ['title', 'description', 'category', 'subcategory', 'price', 'currency', 'condition', 'location', 'server']
    missing_fields = [field for field in required_fields if field not in data]
    
    if missing_fields:
        await message.answer(f"‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    user_id = message.from_user.id
    photos = data.get('photos', [])
    
    success = db.add_advertisement(
        user_id=user_id,
        title=data['title'],
        description=data['description'],
        category=data['category'],
        subcategory=data['subcategory'],
        price=data['price'],
        currency=data['currency'],
        condition=data['condition'],
        location=data['location'],
        server=data['server'],
        photos=photos
    )
    
    if success:
        await message.answer(
            "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
            f"üìù {data['title']}\n"
            f"üí∞ {data['price']} {data['currency']}\n"
            f"üìÇ {CATEGORIES[data['category']]} - {data['subcategory']}\n"
            f"üì∏ –§–æ—Ç–æ: {len(photos)}",
            reply_markup=get_main_menu()
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
@router.callback_query(F.data.startswith("view_ad_"))
async def view_advertisement(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    ad_id = int(callback.data.split("_")[2])
    ad = db.get_advertisement(ad_id)
    
    if ad:
        await show_advertisement(callback.message, ad, 0, 1)
    else:
        await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    await callback.answer()

@router.callback_query(F.data.startswith("next_ad_"))
async def next_advertisement(callback: CallbackQuery):
    """–°–ª–µ–¥—É—é—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
    parts = callback.data.split("_")
    category = parts[2]
    subcategory = parts[3]
    current_index = int(parts[4])
    
    ads = db.get_advertisements(category)
    filtered_ads = [ad for ad in ads if ad.get('subcategory') == subcategory]
    
    if current_index + 1 < len(filtered_ads):
        ad = filtered_ads[current_index + 1]
        await show_advertisement(callback.message, ad, current_index + 1, len(filtered_ads))
    else:
        await callback.answer("üìÑ –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
    
    await callback.answer()

@router.callback_query(F.data.startswith("prev_ad_"))
async def prev_advertisement(callback: CallbackQuery):
    """–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
    parts = callback.data.split("_")
    category = parts[2]
    subcategory = parts[3]
    current_index = int(parts[4])
    
    ads = db.get_advertisements(category)
    filtered_ads = [ad for ad in ads if ad.get('subcategory') == subcategory]
    
    if current_index > 0:
        ad = filtered_ads[current_index - 1]
        await show_advertisement(callback.message, ad, current_index - 1, len(filtered_ads))
    else:
        await callback.answer("üìÑ –≠—Ç–æ –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@router.callback_query(F.data.startswith("ads_page_"))
async def ads_page(callback: CallbackQuery):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    page = int(callback.data.split("_")[2])
    category = callback.data.split("_")[3] if len(callback.data.split("_")) > 3 else None
    
    if category:
        ads = db.get_advertisements(category)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await show_ads_page(callback.message, ads, page, category)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")
    
    await callback.answer()

async def show_ads_page(message: Message, ads: list, page: int, category: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    per_page = 5
    start = page * per_page
    end = start + per_page
    page_ads = ads[start:end]
    
    if page_ads:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        ad = page_ads[0]
        total_pages = (len(ads) + per_page - 1) // per_page
        
        await show_advertisement(message, ad, page, total_pages)
    else:
        await message.edit_text(
            f"üìÇ {CATEGORIES.get(category, '–ö–∞—Ç–µ–≥–æ—Ä–∏—è')}\n\n"
            "üòî –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
            reply_markup=get_pagination_keyboard(page, (len(ads) + per_page - 1) // per_page, "ads")
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
@router.callback_query(F.data == "favorites_items")
async def show_favorites_items(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"""
    user_id = callback.from_user.id
    favorites = db.get_user_favorites(user_id, "item")
    
    if favorites:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        ad = db.get_advertisement(favorites[0]['target_id'])
        if ad:
            await show_advertisement(callback.message, ad, 0, len(favorites))
        else:
            await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        try:
            await callback.message.edit_text(
                "‚≠ê **–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã**\n\n"
                "üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n\n"
                "üîô –ù–∞–∑–∞–¥:",
                reply_markup=get_favorites_menu()
            )
        except Exception:
            await callback.message.answer(
                "‚≠ê **–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã**\n\n"
                "üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n\n"
                "üîô –ù–∞–∑–∞–¥:",
                reply_markup=get_favorites_menu()
            )
    
    await callback.answer()

@router.callback_query(F.data == "favorites_sellers")
async def show_favorites_sellers(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤"""
    user_id = callback.from_user.id
    favorites = db.get_user_favorites(user_id, "seller")
    
    if favorites:
        sellers_text = "üë§ **–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü—ã:**\n\n"
        for fav in favorites:
            seller = db.get_user(fav['target_id'])
            if seller:
                sellers_text += f"‚Ä¢ @{seller.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
        
        await callback.message.edit_text(
            sellers_text + "\nüîô –ù–∞–∑–∞–¥:",
            reply_markup=get_favorites_menu()
        )
    else:
        await callback.message.edit_text(
            "üë§ **–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü—ã**\n\n"
            "üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤.\n\n"
            "üîô –ù–∞–∑–∞–¥:",
            reply_markup=get_favorites_menu()
        )
    
    await callback.answer()

@router.callback_query(F.data == "favorites_categories")
async def show_favorites_categories(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user_id = callback.from_user.id
    favorites = db.get_user_favorites(user_id, "category")
    
    if favorites:
        categories_text = "üìÇ **–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n\n"
        for fav in favorites:
            categories_text += f"‚Ä¢ {fav['target_id']}\n"
        
        await callback.message.edit_text(
            categories_text + "\nüîô –ù–∞–∑–∞–¥:",
            reply_markup=get_favorites_menu()
        )
    else:
        await callback.message.edit_text(
            "üìÇ **–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏**\n\n"
            "üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.\n\n"
            "üîô –ù–∞–∑–∞–¥:",
            reply_markup=get_favorites_menu()
        )
    
    await callback.answer()

@router.callback_query(F.data == "favorites_settings")
async def show_favorites_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    await callback.message.edit_text(
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ**\n\n"
        "üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**\n"
        "‚Ä¢ –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö\n"
        "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤\n"
        "‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã\n\n"
        "üîô –ù–∞–∑–∞–¥:",
        reply_markup=get_favorites_menu()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∂–∞–ª–æ–±
@router.callback_query(ComplaintStates.waiting_for_reason, F.data.startswith("complaint_reason_"))
async def process_complaint_reason(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –∂–∞–ª–æ–±—ã"""
    reason = callback.data.split("_")[2]
    
    await state.update_data(complaint_reason=reason)
    await state.set_state(ComplaintStates.waiting_for_description)
    
    await callback.message.answer(
        "‚ö†Ô∏è **–ñ–∞–ª–æ–±–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ**\n\n"
        f"**–ü—Ä–∏—á–∏–Ω–∞:** {reason}\n\n"
        "üìù **–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ–±–ª–µ–º—É:**"
    )
    
    await callback.answer()

@router.message(ComplaintStates.waiting_for_description)
async def process_complaint_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∂–∞–ª–æ–±—ã"""
    if len(message.text) < 10:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(complaint_description=message.text)
    await state.set_state(ComplaintStates.waiting_for_evidence)
    
    await message.answer(
        "üì∏ **–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ –∂–∞–ª–æ–±—É:\n\n"
        "üîô –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel"
    )

@router.message(ComplaintStates.waiting_for_evidence, F.photo)
async def process_complaint_evidence(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –∂–∞–ª–æ–±—ã"""
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file_id = photo.file_id
    
    # –°–æ–∑–¥–∞–µ–º –∂–∞–ª–æ–±—É
    success = db.add_complaint(
        user_id=message.from_user.id,
        target_type="advertisement",
        target_id=data.get('complaint_ad_id', 0),
        reason=data.get('complaint_reason', 'unknown'),
        description=data.get('complaint_description', ''),
        evidence=file_id
    )
    
    if success:
        await message.answer(
            "‚úÖ **–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!**\n\n"
            "–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!",
            reply_markup=get_main_menu()
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    await state.clear()

@router.message(ComplaintStates.waiting_for_evidence)
async def process_complaint_evidence_wrong(message: Message):
    """–ü–æ–¥—Å–∫–∞–∑–∫–∞, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–µ —Ñ–æ—Ç–æ –Ω–∞ —ç—Ç–∞–ø–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤"""
    await message.answer("‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ (—Å–∫—Ä–∏–Ω—à–æ—Ç). –õ–∏–±–æ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–∞—Ç–∞
@router.callback_query(F.data.startswith("chat_"))
async def chat_with_seller(callback: CallbackQuery, state: FSMContext):
    """–ß–∞—Ç —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º"""
    ad_id = int(callback.data.split("_")[1])
    ad = db.get_advertisement(ad_id)
    
    if ad:
        seller_id = ad.get('user_id')
        user_id = callback.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç
        chat_id = db.get_or_create_chat(user_id, seller_id, ad_id)
        
        await callback.message.answer(
            "üí¨ **–ß–∞—Ç —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º**\n\n"
            f"üìù –¢–æ–≤–∞—Ä: {ad.get('title')}\n"
            f"üí∞ –¶–µ–Ω–∞: {ad.get('price')} {ad.get('currency')}\n\n"
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É:",
            reply_markup=get_chat_keyboard(ad_id)
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        await state.set_state(ChatStates.waiting_for_message)
        await state.update_data(chat_id=chat_id, ad_id=ad_id, seller_id=seller_id)
        await callback.answer("üí¨ –ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç! –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    else:
        await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
@router.callback_query(F.data.startswith("follow_seller_"))
async def follow_seller(callback: CallbackQuery):
    """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
    ad_id = int(callback.data.split("_")[2])
    ad = db.get_advertisement(ad_id)
    
    if ad:
        seller_id = ad.get('user_id')
        user_id = callback.from_user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        if db.add_favorite(user_id, "seller", seller_id):
            await callback.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
    else:
        await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@router.callback_query(F.data == "admin_users")
async def admin_users(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if callback.from_user.username != ADMIN_USERNAME:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    await callback.message.edit_text(
        "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_users_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast(callback: CallbackQuery):
    """–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"""
    if callback.from_user.username != ADMIN_USERNAME:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    await callback.message.edit_text(
        "üì¢ **–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=get_admin_broadcast_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "admin_settings")
async def admin_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    if callback.from_user.username != ADMIN_USERNAME:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    await callback.message.edit_text(
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:",
        reply_markup=get_admin_settings_keyboard()
    )
@router.callback_query(F.data == "back_to_admin")
async def back_to_admin(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∫–æ—Ä–µ–Ω—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    try:
        await callback.message.delete()
    except Exception:
        pass
    await callback.message.answer("üëë **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**", reply_markup=get_admin_panel())
    await callback.answer()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def show_advertisement(message: Message, ad: dict, current_index: int, total_count: int):
    """–ü–æ–∫–∞–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    photos = json.loads(ad.get('photos', '[]'))
    
    text = f"""
üìù **{ad.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**

üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:** {ad.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {CATEGORIES.get(ad.get('category', ''), '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üè∑Ô∏è **–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:** {ad.get('subcategory', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üí∞ **–¶–µ–Ω–∞:** {ad.get('price', 0)} {ad.get('currency', 'USD')}
üÜï **–°–æ—Å—Ç–æ—è–Ω–∏–µ:** {CONDITION_NAMES.get(ad.get('condition', 'unknown'), '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üñ•Ô∏è **–°–µ—Ä–≤–µ—Ä:** {ad.get('server', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üë§ **–ü—Ä–æ–¥–∞–≤–µ—Ü:** @{ad.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}
‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** {ad.get('rating', 5.0)}/5.0
üëÅÔ∏è **–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:** {ad.get('views', 0)}
‚ù§Ô∏è **–õ–∞–π–∫–∏:** {ad.get('likes', 0)}

üìÖ **–î–∞—Ç–∞:** {ad.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

üìÑ **{current_index + 1} –∏–∑ {total_count}**
    """
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    try:
        current_user_id = message.chat.id
        is_favorite = db.is_favorite(current_user_id, "item", ad.get('id'))
        can_delete = (ad.get('user_id') == current_user_id) or (message.from_user and message.from_user.username == ADMIN_USERNAME)
    except Exception:
        is_favorite = False
        can_delete = False
    
    if photos and photos[0]:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
        try:
            # –í—ã—á–∏—Å–ª–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            category = ad.get('category') or ""
            subcategory = ad.get('subcategory') or ""
            await message.answer_photo(
                photos[0],
                caption=text,
                reply_markup=get_advertisement_actions_with_nav(ad.get('id'), is_favorite, category, subcategory, current_index, total_count, can_delete)
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            category = ad.get('category') or ""
            subcategory = ad.get('subcategory') or ""
            await message.answer(text, reply_markup=get_advertisement_actions_with_nav(ad.get('id'), is_favorite, category, subcategory, current_index, total_count, can_delete))
    else:
        category = ad.get('category') or ""
        subcategory = ad.get('subcategory') or ""
        await message.answer(text, reply_markup=get_advertisement_actions_with_nav(ad.get('id'), is_favorite, category, subcategory, current_index, total_count, can_delete))

@router.callback_query(F.data.startswith("delete_ad_"))
async def delete_ad(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏–ª–∏ –∞–¥–º–∏–Ω–æ–º"""
    ad_id = int(callback.data.split("_")[2])
    ad = db.get_advertisement(ad_id)
    if not ad:
        await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    is_admin = callback.from_user.username == ADMIN_USERNAME
    ok = db.delete_advertisement(ad_id, requester_id=callback.from_user.id, is_admin=is_admin)
    if ok:
        await callback.message.answer("üóëÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
    else:
        await callback.message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∞–≤–∏–ª
@router.callback_query(F.data == "rules_general")
async def show_general_rules(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞"""
    rules_text = f"""
üìã **–û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ Black Russia Market**

‚úÖ **–†–∞–∑—Ä–µ—à–µ–Ω–æ:**
‚Ä¢ –¢–æ—Ä–≥–æ–≤–ª—è –∏–≥—Ä–æ–≤—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
‚Ä¢ –û–±–º–µ–Ω –≤–∞–ª—é—Ç—ã –∏ —Ä–µ—Å—É—Ä—Å–æ–≤
‚Ä¢ –ü—Ä–æ–¥–∞–∂–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Å —Å–æ–≥–ª–∞—Å–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
‚Ä¢ –¢–æ—Ä–≥–æ–≤—ã–µ —É—Å–ª—É–≥–∏

‚ùå **–ó–∞–ø—Ä–µ—â–µ–Ω–æ:**
‚Ä¢ –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ –∏ –æ–±–º–∞–Ω
‚Ä¢ –°–ø–∞–º –∏ —Ä–µ–∫–ª–∞–º–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
‚Ä¢ –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏ —É–≥—Ä–æ–∑—ã
‚Ä¢ –ü—Ä–æ–¥–∞–∂–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤

üí∞ **–¶–µ–Ω—ã:**
‚Ä¢ –õ—é–±—ã–µ —Ü–µ–Ω—ã –≤ USD, RUB, EUR
‚Ä¢ –ú–∏–Ω–∏–º—É–º: 0.01
‚Ä¢ –í—Å–µ —Ü–µ–Ω—ã —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ

üì∏ **–§–æ—Ç–æ:**
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º {MAX_PHOTOS_PER_AD} —Ñ–æ—Ç–æ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
‚Ä¢ –¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–≤—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
‚Ä¢ –ë–µ–∑ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        """
    
    await callback.message.edit_text(rules_text, reply_markup=get_rules_keyboard())
    await callback.answer()

@router.callback_query(F.data == "rules_trading")
async def show_trading_rules(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    rules_text = """
üí∞ **–ü—Ä–∞–≤–∏–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏**

ü§ù **–ü—Ä–æ—Ü–µ—Å—Å —Å–¥–µ–ª–∫–∏:**
1. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç —Ç–æ–≤–∞—Ä
2. –°–≤—è–∑—ã–≤–∞–µ—Ç—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º
3. –û–±—Å—É–∂–¥–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤ —á–∞—Ç–µ
4. –î–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç—Å—è –æ —Ü–µ–Ω–µ
5. –°–æ–≤–µ—Ä—à–∞–µ—Ç –æ–±–º–µ–Ω –≤ –∏–≥—Ä–µ

üí¨ **–û–±—â–µ–Ω–∏–µ:**
‚Ä¢ –í–µ–∂–ª–∏–≤–æ—Å—Ç—å –∏ —É–≤–∞–∂–µ–Ω–∏–µ
‚Ä¢ –ß–µ—Ç–∫–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
‚Ä¢ –§–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–¥–µ–ª–∫–∏

‚öñÔ∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚Ä¢ –ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –∑–∞—Ä–∞–Ω–µ–µ
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞
‚Ä¢ –î–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤
‚Ä¢ –ü—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö - –æ—Ç–∫–∞–∂–∏—Ç–µ—Å—å

üö´ **–ó–∞–ø—Ä–µ—â–µ–Ω–æ:**
‚Ä¢ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–π
‚Ä¢ –û–±–º–∞–Ω –∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ
‚Ä¢ –ü—Ä–æ–¥–∞–∂–∞ —á—É–∂–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã
        """
    
    await callback.message.edit_text(rules_text, reply_markup=get_rules_keyboard())
    await callback.answer()

@router.callback_query(F.data == "rules_forbidden")
async def show_forbidden_rules(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"""
    rules_text = f"""
üö´ **–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã**

‚ùå **–ù–µ–ª—å–∑—è –ø—Ä–æ–¥–∞–≤–∞—Ç—å:**
‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏ (–∫—Ä–æ–º–µ –∏–≥—Ä–æ–≤—ã—Ö)
‚Ä¢ –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –í–∑–ª–æ–º–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
‚Ä¢ –ß–∏—Ç—ã –∏ –º–æ–¥—ã –¥–ª—è –∏–≥—Ä—ã
‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç 18+ (–ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è)
‚Ä¢ –ù–∞—Ä–∫–æ—Ç–∏–∫–∏ (—Ä–µ–∞–ª—å–Ω—ã–µ)
‚Ä¢ –û—Ä—É–∂–∏–µ (—Ä–µ–∞–ª—å–Ω–æ–µ)

‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º {MAX_PHOTOS_PER_AD} —Ñ–æ—Ç–æ
‚Ä¢ –¶–µ–Ω–∞: –ª—é–±—ã–µ —Ü–µ–Ω—ã –≤ USD, RUB, EUR (–º–∏–Ω–∏–º—É–º 0.01)
‚Ä¢ –¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
‚Ä¢ –ë–µ–∑ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ç–æ–≤–∞—Ä –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π
‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –ø–∞—Ä–æ–ª–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–≤—ã–µ —á–∞—Ç—ã
‚Ä¢ –°–æ–æ–±—â–∞–π—Ç–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö
        """
    
    await callback.message.edit_text(rules_text, reply_markup=get_rules_keyboard())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if callback.from_user.username != ADMIN_USERNAME:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    ads = db.get_advertisements()
    total_ads = len(ads)
    
    pending_complaints = len(db.get_pending_complaints())
    
    stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üìù **–û–±—ä—è–≤–ª–µ–Ω–∏—è:**
‚Ä¢ –í—Å–µ–≥–æ: {total_ads}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {total_ads}

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_ads + 100}

‚ö†Ô∏è **–ú–æ–¥–µ—Ä–∞—Ü–∏—è:**
‚Ä¢ –ñ–∞–ª–æ–±: {pending_complaints}

üí∞ **–¶–µ–Ω–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã:**
‚Ä¢ –õ—é–±—ã–µ —Ü–µ–Ω—ã –≤ USD, RUB, EUR
‚Ä¢ –ú–∏–Ω–∏–º—É–º: 0.01
        """
    
    await callback.message.edit_text(stats_text, reply_markup=get_admin_panel())
    await callback.answer()

@router.callback_query(F.data == "admin_complaints")
async def admin_complaints(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∞–ª–æ–±–∞–º–∏"""
    if callback.from_user.username != ADMIN_USERNAME:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    await callback.message.edit_text(
        "‚ö†Ô∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∞–ª–æ–±–∞–º–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_complaints_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "admin_complaints_pending")
async def admin_complaints_pending(callback: CallbackQuery):
    """–ù–æ–≤—ã–µ –∂–∞–ª–æ–±—ã"""
    if callback.from_user.username != ADMIN_USERNAME:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    pending_complaints = db.get_pending_complaints()
    
    if pending_complaints:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∂–∞–ª–æ–±—É
        complaint = pending_complaints[0]
        await show_complaint(callback.message, complaint, 0, len(pending_complaints))
    else:
        await callback.message.edit_text(
            "‚ö†Ô∏è **–ù–æ–≤—ã–µ –∂–∞–ª–æ–±—ã**\n\n"
            "‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∂–∞–ª–æ–± –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è",
            reply_markup=get_admin_complaints_keyboard()
        )
    
    await callback.answer()

@router.callback_query(F.data == "admin_integrations")
async def admin_integrations(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏"""
    if callback.from_user.username != ADMIN_USERNAME:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    await callback.message.edit_text(
        "üîó **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏**\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞:\n"
        "‚Ä¢ Telegram —á–∞—Ç—ã –∏ –≥—Ä—É–ø–ø—ã\n"
        "‚Ä¢ –í–µ–±-—Å–∞–π—Ç—ã\n"
        "‚Ä¢ Telegram –∫–∞–Ω–∞–ª—ã\n"
        "‚Ä¢ –î—Ä—É–≥–∏–µ –±–æ—Ç—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_integrations_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "admin_add_integration")
async def admin_add_integration(callback: CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    if callback.from_user.username != ADMIN_USERNAME:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    await callback.message.edit_text(
        "üîó **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Å—ã–ª–∫–∏:",
        reply_markup=get_integration_types_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("integration_type_"))
async def select_integration_type(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    if callback.from_user.username != ADMIN_USERNAME:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    integration_type = callback.data.split("_")[2]
    await state.update_data(integration_type=integration_type)
    
    await callback.message.edit_text(
        "üîó **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏**\n\n"
        f"–¢–∏–ø: {integration_type}\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:",
        reply_markup=get_admin_integrations_keyboard()
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
@router.callback_query(F.data.startswith("add_favorite_"))
async def add_favorite(callback: CallbackQuery):
    """–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    ad_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    if db.add_favorite(user_id, "item", ad_id):
        await callback.answer("‚ù§Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")

@router.callback_query(F.data.startswith("remove_favorite_"))
async def remove_favorite(callback: CallbackQuery):
    """–£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    ad_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    if db.remove_favorite(user_id, "item", ad_id):
        await callback.answer("üíî –£–±—Ä–∞–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")

@router.callback_query(F.data.startswith("complain_"))
async def complain_advertisement(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
    ad_id = int(callback.data.split("_")[1])
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –∂–∞–ª–æ–±—ã –≤ FSM
    await state.update_data(complaint_ad_id=ad_id)
    # –Ø–≤–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã
    await state.set_state(ComplaintStates.waiting_for_reason)
    await callback.message.answer(
        "‚ö†Ô∏è **–ñ–∞–ª–æ–±–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:",
        reply_markup=get_complaint_reasons_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("back_to_ad_"))
async def back_to_ad(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ —á–∞—Ç–∞ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é"""
    ad_id = int(callback.data.split("_")[2])
    ad = db.get_advertisement(ad_id)
    if ad:
        await show_advertisement(callback.message, ad, 0, 1)
        await callback.answer()
    else:
        await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

@router.callback_query(F.data.startswith("chat_history_"))
async def chat_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é"""
    ad_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    ad = db.get_advertisement(ad_id)
    if not ad:
        await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    seller_id = ad.get('user_id')
    chat = db.get_chat_between(user_id, seller_id, ad_id)
    if not chat:
        await callback.answer("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    messages = db.get_chat_messages(chat['id'])
    if messages:
        history_lines = []
        for m in messages[-20:]:
            who = "–í—ã" if m['user_id'] == user_id else "–ü—Ä–æ–¥–∞–≤–µ—Ü"
            if m.get('message_text'):
                history_lines.append(f"{who}: {m['message_text']}")
        text = "\n".join(history_lines) if history_lines else "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"
    else:
        text = "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"
    await callback.message.answer(
        f"üïò –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π)\n\n{text}",
        reply_markup=get_chat_keyboard(ad_id)
    )
    await callback.answer()

@router.message(ChatStates.waiting_for_message)
async def handle_chat_message(message: Message, state: FSMContext):
    """–ü—Ä–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü—É"""
    data = await state.get_data()
    chat_id = data.get('chat_id')
    seller_id = data.get('seller_id')
    ad_id = data.get('ad_id')
    if not chat_id or not seller_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞. –û—Ç–∫—Ä–æ–π—Ç–µ —á–∞—Ç –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.")
        await state.clear()
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø—Ä–æ–¥–∞–≤—Ü—É
    db.add_message(chat_id, message.from_user.id, message.text)
    try:
        await message.bot.send_message(seller_id, f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:\n\n{message.text}")
    except Exception:
        pass
    await message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É", reply_markup=get_chat_keyboard(ad_id))

async def show_complaint(message: Message, complaint: dict, current_index: int, total_count: int):
    """–ü–æ–∫–∞–∑ –∂–∞–ª–æ–±—ã"""
    text = f"""
‚ö†Ô∏è **–ñ–∞–ª–æ–±–∞ #{complaint.get('id')}**

üë§ **–û—Ç:** @{complaint.get('user_username', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}
üéØ **–¢–∏–ø:** {complaint.get('target_type')}
üÜî **ID —Ü–µ–ª–∏:** {complaint.get('target_id')}
üö´ **–ü—Ä–∏—á–∏–Ω–∞:** {complaint.get('reason')}

üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:** {complaint.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìÖ **–î–∞—Ç–∞:** {complaint.get('created_at')}

üìÑ {current_index + 1} –∏–∑ {total_count}
    """
    
    buttons = [
        [
            InlineKeyboardButton(
                text="‚úÖ –†–µ—à–∏—Ç—å",
                callback_data=f"resolve_complaint_{complaint.get('id')}"
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data=f"reject_complaint_{complaint.get('id')}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="admin_complaints"
            )
        ]
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.edit_text(text, reply_markup=keyboard)

# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

@router.message(F.text == "üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫")
async def advanced_search(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    await message.answer("üîç **–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:", reply_markup=get_search_filters_keyboard())

@router.message(F.text == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
async def show_analytics(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    await message.answer("üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ Black Russia Market**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:", reply_markup=get_analytics_keyboard())

@router.message(F.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def show_notifications(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await message.answer("üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=get_notification_settings_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞
@router.callback_query(F.data == "search_by_title")
async def search_by_title(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    await state.set_state(SearchStates.waiting_for_search_query)
    await callback.message.answer("üîç **–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await callback.answer()

@router.callback_query(F.data == "filter_by_price")
async def filter_by_price(callback: CallbackQuery, state: FSMContext):
    """–§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ"""
    await state.set_state(SearchStates.waiting_for_price_min)
    await callback.message.answer("üí∞ **–§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ**\n\n–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:")
    await callback.answer()

@router.callback_query(F.data == "filter_by_server")
async def filter_by_server(callback: CallbackQuery):
    """–§–∏–ª—å—Ç—Ä –ø–æ —Å–µ—Ä–≤–µ—Ä—É"""
    await callback.message.answer("üñ•Ô∏è **–§–∏–ª—å—Ç—Ä –ø–æ —Å–µ—Ä–≤–µ—Ä—É**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:", reply_markup=get_servers_keyboard())
    await callback.answer()

@router.callback_query(F.data == "sort_options")
async def sort_options(callback: CallbackQuery):
    """–û–ø—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
    await callback.message.answer("üìä **–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:", reply_markup=get_sort_options_keyboard())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
@router.callback_query(F.data == "analytics_sales")
async def analytics_sales(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂"""
    ads = db.get_advertisements()
    total_ads = len(ads)
    total_value = sum(ad.get('price', 0) for ad in ads)
    
    text = f"""
üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂**

üìù **–û–±—ä—è–≤–ª–µ–Ω–∏—è:**
‚Ä¢ –í—Å–µ–≥–æ: {total_ads}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {total_ads}

üí∞ **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:**
‚Ä¢ {total_value:.2f} USD

üìä **–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**
"""
    
    for category_id, category_name in CATEGORIES.items():
        count = len([ad for ad in ads if ad.get('category') == category_id])
        if count > 0:
            text += f"‚Ä¢ {category_name}: {count}\n"
    
    await callback.message.answer(text, reply_markup=get_analytics_keyboard())
    await callback.answer()

@router.callback_query(F.data == "analytics_prices")
async def analytics_prices(callback: CallbackQuery):
    """–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω"""
    ads = db.get_advertisements()
    
    if ads:
        prices = [ad.get('price', 0) for ad in ads]
        avg_price = sum(prices) / len(prices)
        min_price = min(prices)
        max_price = max(prices)
        
        text = f"""
üí∞ **–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:.2f} USD
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {min_price:.2f} USD
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {max_price:.2f} USD

üìà **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã:**
‚Ä¢ –î–æ 100 USD: {len([p for p in prices if p < 100])}
‚Ä¢ 100-500 USD: {len([p for p in prices if 100 <= p < 500])}
‚Ä¢ 500-1000 USD: {len([p for p in prices if 500 <= p < 1000])}
‚Ä¢ –°–≤—ã—à–µ 1000 USD: {len([p for p in prices if p >= 1000])}
        """
    else:
        text = "üí∞ **–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω**\n\nüòî –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    
    await callback.message.answer(text, reply_markup=get_analytics_keyboard())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@router.callback_query(F.data == "admin_verification")
async def admin_verification(callback: CallbackQuery):
    """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""
    if callback.from_user.username != ADMIN_USERNAME:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    await callback.message.answer(
        "üõ°Ô∏è **–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤**\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏ –æ–¥–æ–±—Ä—è—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π.",
        reply_markup=get_admin_panel()
    )
    await callback.answer()

@router.callback_query(F.data == "admin_blacklist")
async def admin_blacklist(callback: CallbackQuery):
    """–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
    if callback.from_user.username != ADMIN_USERNAME:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    await callback.message.answer(
        "üö´ **–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫**\n\n"
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:",
        reply_markup=get_blacklist_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.callback_query(F.data == "notify_new_items")
async def notify_new_items(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö"""
    await callback.message.answer(
        "üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö**\n\n"
        "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.",
        reply_markup=get_notification_settings_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "notify_messages")
async def notify_messages(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    await callback.message.answer(
        "üí¨ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö**\n\n"
        "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤ —á–∞—Ç–∞—Ö.",
        reply_markup=get_notification_settings_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
@router.callback_query(F.data.startswith("server_"))
async def select_server(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞"""
    server = callback.data.split("_")[1]
    
    if server not in SERVERS:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ—Ä–≤–µ—Ä")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    current_state = await state.get_state()
    if current_state == AdvertisementStates.waiting_for_server.state:
        await state.update_data(server=server)
        await state.set_state(AdvertisementStates.waiting_for_photos)
        await callback.message.answer(f"üñ•Ô∏è **–°–µ—Ä–≤–µ—Ä:** {server}\n\nüì∏ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞** (–º–∞–∫—Å–∏–º—É–º {MAX_PHOTOS_PER_AD} —Ñ–æ—Ç–æ):\n\nüîô –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /finish")
    else:
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å–µ—Ä–≤–µ—Ä—É
        ads = db.get_advertisements()
        filtered_ads = [ad for ad in ads if ad.get('server') == server]
        
        if filtered_ads:
            ad = filtered_ads[0]
            await show_advertisement(callback.message, ad, 0, len(filtered_ads))
        else:
            await callback.message.answer(
                f"üñ•Ô∏è **–°–µ—Ä–≤–µ—Ä: {server}**\n\n"
                "üòî –ü–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.",
                reply_markup=get_servers_keyboard()
            )
    
    await callback.answer()
