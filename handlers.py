from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
import json

from config import (
    ADMIN_USERNAME, CATEGORIES, SUBCATEGORIES, CURRENCIES, 
    CONDITIONS, CONDITION_NAMES, SERVERS, COMPLAINT_REASONS
)
from database import Database

router = Router()
db = Database("black_russia_market.db")

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class AdvertisementStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_category = State()
    waiting_for_subcategory = State()
    waiting_for_currency = State()
    waiting_for_price = State()
    waiting_for_condition = State()
    waiting_for_server = State()
    waiting_for_photos = State()

class ComplaintStates(StatesGroup):
    waiting_for_reason = State()
    waiting_for_description = State()
    waiting_for_evidence = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã"), KeyboardButton(text="üìù –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")],
            [KeyboardButton(text="‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"), KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫"), KeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")],
            [KeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"), KeyboardButton(text="üìã –ü—Ä–∞–≤–∏–ª–∞")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"), KeyboardButton(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")]
        ],
        resize_keyboard=True,
        row_width=2
    )
    return keyboard

def get_categories_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    buttons = []
    for key, value in CATEGORIES.items():
        buttons.append([InlineKeyboardButton(text=value, callback_data=f"cat_{key}")])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_subcategories_keyboard(category):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    buttons = []
    for subcat in SUBCATEGORIES.get(category, []):
        buttons.append([InlineKeyboardButton(text=subcat, callback_data=f"sub_{subcat}")])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_currencies_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–∞–ª—é—Ç"""
    buttons = []
    for currency in CURRENCIES:
        buttons.append([InlineKeyboardButton(text=currency, callback_data=f"curr_{currency}")])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_conditions_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    buttons = []
    for key, value in CONDITION_NAMES.items():
        buttons.append([InlineKeyboardButton(text=value, callback_data=f"cond_{key}")])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_servers_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    buttons = []
    for i in range(0, len(SERVERS), 2):
        row = []
        for j in range(2):
            if i + j < len(SERVERS):
                row.append(InlineKeyboardButton(text=SERVERS[i + j], callback_data=f"serv_{SERVERS[i + j]}"))
        buttons.append(row)
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_complaint_reasons_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏—á–∏–Ω –∂–∞–ª–æ–±"""
    buttons = []
    for key, value in COMPLAINT_REASONS.items():
        buttons.append([InlineKeyboardButton(text=value, callback_data=f"complaint_{key}")])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_complaint")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    db.add_user(user_id, username, first_name, last_name)
    
    await message.answer(
        "üéÆ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Black Russia Bot!**\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–∫—É–ø–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∏–≥—Ä–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã!\n\n"
        "**–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:**",
        reply_markup=get_main_menu(),
        parse_mode="Markdown"
    )

@router.message(Command("cancel"))
async def cancel_command(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!", reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@router.message(F.text == "üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã")
async def search_items(message: Message):
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
    ads = db.get_advertisements(limit=10)
    
    if not ads:
        await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ë—É–¥—å –ø–µ—Ä–≤—ã–º!")
        return
    
    text = "üîç **–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:**\n\n"
    for i, ad in enumerate(ads, 1):
        text += f"**{i}.** üì¶ **{ad[2]}**\n"
        text += f"üí∞ –¶–µ–Ω–∞: {ad[6]} {ad[7]}\n"
        text += f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ad[3]}\n"
        text += f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{ad[9] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"üïí {ad[10]}\n\n"
    
    await message.answer(text, parse_mode="Markdown")

@router.message(F.text == "üìù –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def create_ad(message: Message, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    await state.set_state(AdvertisementStates.waiting_for_title)
    await message.answer(
        "üìù **–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è**\n\n"
        "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        parse_mode="Markdown"
    )

@router.message(AdvertisementStates.waiting_for_title)
async def process_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    await state.update_data(title=message.text)
    await state.set_state(AdvertisementStates.waiting_for_description)
    await message.answer(
        "üìù **–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞**\n\n"
        "–û–ø–∏—à–∏ —Ç–æ–≤–∞—Ä –ø–æ–¥—Ä–æ–±–Ω–æ:",
        parse_mode="Markdown"
    )

@router.message(AdvertisementStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    await state.update_data(description=message.text)
    await state.set_state(AdvertisementStates.waiting_for_category)
    await message.answer(
        "üè∑Ô∏è **–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:**",
        reply_markup=get_categories_keyboard(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("cat_"))
async def process_category(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = callback.data.split("_")[1]
    await state.update_data(category=category)
    await state.set_state(AdvertisementStates.waiting_for_subcategory)
    
    await callback.message.edit_text(
        f"üè∑Ô∏è **–í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:**",
        reply_markup=get_subcategories_keyboard(category),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("sub_"))
async def process_subcategory(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    subcategory = callback.data.split("_")[1]
    await state.update_data(subcategory=subcategory)
    await state.set_state(AdvertisementStates.waiting_for_currency)
    
    await callback.message.edit_text(
        "üí± **–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É:**",
        reply_markup=get_currencies_keyboard(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("curr_"))
async def process_currency(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª—é—Ç—ã"""
    currency = callback.data.split("_")[1]
    await state.update_data(currency=currency)
    await state.set_state(AdvertisementStates.waiting_for_price)
    
    await callback.message.edit_text(
        f"üí∞ **–í–≤–µ–¥–∏ —Ü–µ–Ω—É –≤ {currency}:**\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 1000",
        parse_mode="Markdown"
    )

@router.message(AdvertisementStates.waiting_for_price)
async def process_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã"""
    try:
        price = float(message.text)
        await state.update_data(price=price)
        await state.set_state(AdvertisementStates.waiting_for_condition)
        
        await message.answer(
            "üîß **–í—ã–±–µ—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:**",
            reply_markup=get_conditions_keyboard(),
            parse_mode="Markdown"
        )
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ)!")

@router.callback_query(F.data.startswith("cond_"))
async def process_condition(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    condition = callback.data.split("_")[1]
    await state.update_data(condition=condition)
    await state.set_state(AdvertisementStates.waiting_for_server)
    
    await callback.message.edit_text(
        "üåê **–í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–µ—Ä:**",
        reply_markup=get_servers_keyboard(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("serv_"))
async def process_server(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    server = callback.data.split("_")[1]
    await state.update_data(server=server)
    await state.set_state(AdvertisementStates.waiting_for_photos)
    
    await callback.message.edit_text(
        "üì∏ **–ü—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:**\n\n"
        "–ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –ø–æ–¥—Ä—è–¥.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å, –æ—Ç–ø—Ä–∞–≤—å /done",
        parse_mode="Markdown"
    )

@router.message(AdvertisementStates.waiting_for_photos)
async def process_photos(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ"""
    if message.photo:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Ñ–æ—Ç–æ
        photo_id = message.photo[-1].file_id
        data = await state.get_data()
        photos = data.get('photos', [])
        photos.append(photo_id)
        await state.update_data(photos=photos)
        
        await message.answer(f"üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! ({len(photos)}/10)\n\n–û—Ç–ø—Ä–∞–≤—å –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞!")

@router.message(Command("done"))
async def finish_advertisement(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    data = await state.get_data()
    
    if not data.get('title'):
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    photos_str = json.dumps(data.get('photos', []))
    db.add_advertisement(
        user_id=message.from_user.id,
        title=data['title'],
        description=data['description'],
        category=data['category'],
        subcategory=data['subcategory'],
        price=data['price'],
        currency=data['currency'],
        condition=data['condition'],
        server=data['server'],
        photos=photos_str
    )
    
    await state.clear()
    await message.answer(
        "‚úÖ **–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!**\n\n"
        f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
        f"üí∞ –¶–µ–Ω–∞: {data['price']} {data['currency']}\n"
        f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {CATEGORIES[data['category']]}\n"
        f"üåê –°–µ—Ä–≤–µ—Ä: {data['server']}\n\n"
        "–¢–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –≤ –ø–æ–∏—Å–∫–µ!",
        reply_markup=get_main_menu(),
        parse_mode="Markdown"
    )

@router.message(F.text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def favorites(message: Message):
    """–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    await message.answer("‚≠ê **–ò–∑–±—Ä–∞–Ω–Ω–æ–µ**\n\n–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –î–æ–±–∞–≤—å —Ç–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: Message):
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    ads = db.get_advertisements()
    user_ads = [ad for ad in ads if ad[1] == user_id]
    
    text = f"üë§ **–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
    text += f"üÜî ID: {user_id}\n"
    text += f"üìù –û–±—ä—è–≤–ª–µ–Ω–∏–π: {len(user_ads)}\n"
    text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: 5.0\n"
    text += f"üí∞ –ü—Ä–æ–¥–∞–∂: 0\n"
    text += f"üõí –ü–æ–∫—É–ø–æ–∫: 0\n"
    
    await message.answer(text, parse_mode="Markdown")

@router.message(F.text == "üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫")
async def advanced_search(message: Message):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫"""
    await message.answer("üîç **–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫**\n\n–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")

@router.message(F.text == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
async def analytics(message: Message):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"""
    await message.answer("üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞**\n\n–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")

@router.message(F.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def notifications(message: Message):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    await message.answer("üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è**\n\n–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")

@router.message(F.text == "üìã –ü—Ä–∞–≤–∏–ª–∞")
async def rules(message: Message):
    """–ü—Ä–∞–≤–∏–ª–∞"""
    text = "üìã **–ü—Ä–∞–≤–∏–ª–∞ Black Russia Bot**\n\n"
    text += "1. üö´ –ó–∞–ø—Ä–µ—â–µ–Ω—ã –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ –∏ –æ–±–º–∞–Ω\n"
    text += "2. üì∏ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–π —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞\n"
    text += "3. üí∞ –£–∫–∞–∑—ã–≤–∞–π —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É\n"
    text += "4. üè∑Ô∏è –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
    text += "5. üë§ –ù–µ —Å–æ–∑–¥–∞–≤–∞–π —Ñ–µ–π–∫–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã\n"
    text += "6. üåê –£–∫–∞–∑—ã–≤–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä\n"
    text += "7. üìù –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å—ã–≤–∞–π —Ç–æ–≤–∞—Ä\n\n"
    text += "**–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª = –±–∞–Ω! ‚ö†Ô∏è**"
    
    await message.answer(text, parse_mode="Markdown")

@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_command(message: Message):
    """–ü–æ–º–æ—â—å"""
    text = "‚ùì **–ü–æ–º–æ—â—å**\n\n"
    text += "üîç **–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã** - –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
    text += "üìù **–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ** - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ\n"
    text += "‚≠ê **–ò–∑–±—Ä–∞–Ω–Ω–æ–µ** - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã\n"
    text += "üë§ **–ü—Ä–æ—Ñ–∏–ª—å** - —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
    text += "üîç **–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫** - —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞\n"
    text += "üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞** - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂\n"
    text += "üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è** - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
    text += "üìã **–ü—Ä–∞–≤–∏–ª–∞** - –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n\n"
    text += "**–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @Aga_05**"
    
    await message.answer(text, parse_mode="Markdown")

@router.message(F.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if message.from_user.username != ADMIN_USERNAME:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    text = "üëë **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n"
    text += "üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n"
    text += "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n"
    text += "üì¢ **–†–∞—Å—Å—ã–ª–∫–∏**\n"
    text += "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n"
    text += "üõ°Ô∏è **–ú–æ–¥–µ—Ä–∞—Ü–∏—è**\n\n"
    text += "–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!"
    
    await message.answer(text, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–º–µ–Ω—ã
@router.callback_query(F.data == "cancel")
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!")
    await callback.message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())

@router.callback_query(F.data == "cancel_complaint")
async def cancel_complaint(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∂–∞–ª–æ–±—ã"""
    await state.clear()
    await callback.message.edit_text("‚ùå –ñ–∞–ª–æ–±–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def echo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é! ü§î")