import logging
import sqlite3
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8172843951:AAFHMnhFITsIlnA9EwgpVenTHg47UO64bys"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    conn = sqlite3.connect('black_russia_market.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS advertisements (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            title TEXT NOT NULL,
            description TEXT,
            price REAL,
            currency TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_active BOOLEAN DEFAULT TRUE,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    conn.commit()
    conn.close()

def get_main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [KeyboardButton("üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã"), KeyboardButton("üìù –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")],
        [KeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"), KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton("üìã –ü—Ä–∞–≤–∏–ª–∞"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = user.id
    username = user.username
    first_name = user.first_name
    last_name = user.last_name
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    conn = sqlite3.connect('black_russia_market.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR IGNORE INTO users (user_id, username, first_name, last_name)
        VALUES (?, ?, ?, ?)
    ''', (user_id, username, first_name, last_name))
    conn.commit()
    conn.close()
    
    await update.message.reply_text(
        "üéÆ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Black Russia Bot!**\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–∫—É–ø–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∏–≥—Ä–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã!\n\n"
        "**–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:**",
        reply_markup=get_main_menu(),
        parse_mode='Markdown'
    )

async def search_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
    conn = sqlite3.connect('black_russia_market.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT a.*, u.username
        FROM advertisements a
        JOIN users u ON a.user_id = u.user_id
        WHERE a.is_active = TRUE
        ORDER BY a.created_at DESC
        LIMIT 10
    ''')
    
    ads = cursor.fetchall()
    conn.close()
    
    if not ads:
        await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ë—É–¥—å –ø–µ—Ä–≤—ã–º!")
        return
    
    text = "üîç **–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:**\n\n"
    for i, ad in enumerate(ads, 1):
        text += f"**{i}.** üì¶ **{ad[2]}**\n"
        text += f"üí∞ –¶–µ–Ω–∞: {ad[4]} {ad[5]}\n"
        text += f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{ad[7] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"üïí {ad[6]}\n\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def create_ad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    await update.message.reply_text(
        "üìù **–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è**\n\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /create_ad\n"
        "–ò–ª–∏ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!",
        parse_mode='Markdown'
    )

async def favorites(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    await update.message.reply_text("‚≠ê **–ò–∑–±—Ä–∞–Ω–Ω–æ–µ**\n\n–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –î–æ–±–∞–≤—å —Ç–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    conn = sqlite3.connect('black_russia_market.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT COUNT(*) FROM advertisements WHERE user_id = ? AND is_active = TRUE', (user_id,))
    ads_count = cursor.fetchone()[0]
    
    conn.close()
    
    text = f"üë§ **–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
    text += f"üÜî ID: {user_id}\n"
    text += f"üìù –û–±—ä—è–≤–ª–µ–Ω–∏–π: {ads_count}\n"
    text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: 5.0\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∞–≤–∏–ª–∞"""
    text = "üìã **–ü—Ä–∞–≤–∏–ª–∞ Black Russia Bot**\n\n"
    text += "1. üö´ –ó–∞–ø—Ä–µ—â–µ–Ω—ã –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ –∏ –æ–±–º–∞–Ω\n"
    text += "2. üì∏ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–π —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞\n"
    text += "3. üí∞ –£–∫–∞–∑—ã–≤–∞–π —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É\n"
    text += "4. üè∑Ô∏è –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
    text += "5. üë§ –ù–µ —Å–æ–∑–¥–∞–≤–∞–π —Ñ–µ–π–∫–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã\n\n"
    text += "**–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª = –±–∞–Ω! ‚ö†Ô∏è**"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–º–æ—â—å"""
    text = "‚ùì **–ü–æ–º–æ—â—å**\n\n"
    text += "üîç **–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã** - –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
    text += "üìù **–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ** - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ\n"
    text += "‚≠ê **–ò–∑–±—Ä–∞–Ω–Ω–æ–µ** - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã\n"
    text += "üë§ **–ü—Ä–æ—Ñ–∏–ª—å** - —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
    text += "üìã **–ü—Ä–∞–≤–∏–ª–∞** - –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n\n"
    text += "**–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @Aga_05**"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await update.message.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é! ü§î")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_database()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex("^üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã$"), search_items))
    application.add_handler(MessageHandler(filters.Regex("^üìù –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ$"), create_ad))
    application.add_handler(MessageHandler(filters.Regex("^‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ$"), favorites))
    application.add_handler(MessageHandler(filters.Regex("^üë§ –ü—Ä–æ—Ñ–∏–ª—å$"), profile))
    application.add_handler(MessageHandler(filters.Regex("^üìã –ü—Ä–∞–≤–∏–ª–∞$"), rules))
    application.add_handler(MessageHandler(filters.Regex("^‚ùì –ü–æ–º–æ—â—å$"), help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()