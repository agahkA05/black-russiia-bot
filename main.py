import logging
import sqlite3
import requests
import json
import time
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8172843951:AAFHMnhFITsIlnA9EwgpVenTHg47UO64bys"
BASE_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    conn = sqlite3.connect('black_russia_market.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS advertisements (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            title TEXT NOT NULL,
            description TEXT,
            price REAL,
            currency TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_active BOOLEAN DEFAULT TRUE,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    conn.commit()
    conn.close()

def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    url = f"{BASE_URL}/sendMessage"
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'Markdown'
    }
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)
    
    response = requests.post(url, data=data)
    return response.json()

def get_main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return {
        'keyboard': [
            [{'text': 'üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã'}, {'text': 'üìù –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'}],
            [{'text': '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ'}, {'text': 'üë§ –ü—Ä–æ—Ñ–∏–ª—å'}],
            [{'text': 'üìã –ü—Ä–∞–≤–∏–ª–∞'}, {'text': '‚ùì –ü–æ–º–æ—â—å'}]
        ],
        'resize_keyboard': True
    }

def handle_start(chat_id, user_id, username, first_name, last_name):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    conn = sqlite3.connect('black_russia_market.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR IGNORE INTO users (user_id, username, first_name, last_name)
        VALUES (?, ?, ?, ?)
    ''', (user_id, username, first_name, last_name))
    conn.commit()
    conn.close()
    
    text = "üéÆ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Black Russia Bot!**"
    
    send_message(chat_id, text, get_main_menu())

def handle_search_items(chat_id):
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
    conn = sqlite3.connect('black_russia_market.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT a.*, u.username
        FROM advertisements a
        JOIN users u ON a.user_id = u.user_id
        WHERE a.is_active = TRUE
        ORDER BY a.created_at DESC
        LIMIT 10
    ''')
    
    ads = cursor.fetchall()
    conn.close()
    
    if not ads:
        send_message(chat_id, "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ë—É–¥—å –ø–µ—Ä–≤—ã–º!")
        return
    
    text = "üîç **–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:**\n\n"
    for i, ad in enumerate(ads, 1):
        text += f"**{i}.** üì¶ **{ad[2]}**\n"
        text += f"üí∞ –¶–µ–Ω–∞: {ad[4]} {ad[5]}\n"
        text += f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{ad[7] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"üïí {ad[6]}\n\n"
    
    send_message(chat_id, text)

def handle_create_ad(chat_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    text = ("üìù **–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è**\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /create_ad\n"
            "–ò–ª–∏ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")
    send_message(chat_id, text)

def handle_favorites(chat_id):
    """–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    send_message(chat_id, "‚≠ê **–ò–∑–±—Ä–∞–Ω–Ω–æ–µ**\n\n–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –î–æ–±–∞–≤—å —Ç–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")

def handle_profile(chat_id, user_id):
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('black_russia_market.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT COUNT(*) FROM advertisements WHERE user_id = ? AND is_active = TRUE', (user_id,))
    ads_count = cursor.fetchone()[0]
    
    conn.close()
    
    text = (f"üë§ **–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
            f"üÜî ID: {user_id}\n"
            f"üìù –û–±—ä—è–≤–ª–µ–Ω–∏–π: {ads_count}\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: 5.0\n")
    
    send_message(chat_id, text)

def handle_rules(chat_id):
    """–ü—Ä–∞–≤–∏–ª–∞"""
    text = ("üìã **–ü—Ä–∞–≤–∏–ª–∞ Black Russia Bot**\n\n"
            "1. üö´ –ó–∞–ø—Ä–µ—â–µ–Ω—ã –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ –∏ –æ–±–º–∞–Ω\n"
            "2. üì∏ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–π —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞\n"
            "3. üí∞ –£–∫–∞–∑—ã–≤–∞–π —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É\n"
            "4. üè∑Ô∏è –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
            "5. üë§ –ù–µ —Å–æ–∑–¥–∞–≤–∞–π —Ñ–µ–π–∫–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã\n\n"
            "**–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª = –±–∞–Ω! ‚ö†Ô∏è**")
    
    send_message(chat_id, text)

def handle_help(chat_id):
    """–ü–æ–º–æ—â—å"""
    text = ("‚ùì **–ü–æ–º–æ—â—å**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n\n"
            "**–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @Aga_05**")
    
    send_message(chat_id, text)

def handle_message(update):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    message = update.get('message', {})
    chat_id = message.get('chat', {}).get('id')
    user = message.get('from', {})
    user_id = user.get('id')
    username = user.get('username')
    first_name = user.get('first_name')
    last_name = user.get('last_name')
    text = message.get('text', '')
    
    if not chat_id or not user_id:
        return
    
    if text == '/start':
        handle_start(chat_id, user_id, username, first_name, last_name)
    elif text == 'üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã':
        handle_search_items(chat_id)
    elif text == 'üìù –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ':
        handle_create_ad(chat_id)
    elif text == '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ':
        handle_favorites(chat_id)
    elif text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
        handle_profile(chat_id, user_id)
    elif text == 'üìã –ü—Ä–∞–≤–∏–ª–∞':
        handle_rules(chat_id)
    elif text == '‚ùì –ü–æ–º–æ—â—å':
        handle_help(chat_id)
    else:
        send_message(chat_id, "–ù–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é! ü§î")

def get_updates(offset=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    url = f"{BASE_URL}/getUpdates"
    params = {'timeout': 30}
    if offset:
        params['offset'] = offset
    
    try:
        response = requests.get(url, params=params, timeout=35)
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return {'ok': False, 'result': []}

def bot_loop():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
    offset = None
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    # –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏
    logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏...")
    time.sleep(10)
    
    while True:
        try:
            updates = get_updates(offset)
            
            if updates.get('ok'):
                for update in updates.get('result', []):
                    handle_message(update)
                    offset = update.get('update_id', 0) + 1
            else:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {updates}")
                time.sleep(10)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            time.sleep(10)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_database()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot_loop()

if __name__ == '__main__':
    main()